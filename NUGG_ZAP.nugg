<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZAP">
 <PROG NAME="ZAP" VARCL="X" SUBC="I" RSTAT="K" RMAND="999" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="ZAP DSL" LENGTH="7 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZAP
*&amp;---------------------------------------------------------------------*

TYPE-POOLS: ZAP, ABAP.

INCLUDE ZAP_CLASSES.
INCLUDE ZAP_FORMS.

*----------------------------------------------------------------------*
* DESCRIPTION  : short hand Open SQL SELECT Statement
* SYNTAX       :  _select &apos;&lt;table name&gt; : &lt;field1&gt; &lt;field2&gt; ... + &lt;where cond1&gt; + &lt;where cond2&gt;&apos; &lt;ref. var&gt; &lt;fae ref. var&gt;
*                (for all entries table is expressed as &lt;t&gt;)
* USAGE        : _select &apos;bseg + bukrs = &apos;&apos;PEI&apos;&apos; + belnr = &apos;&apos;1800003603&apos;&apos; : bukrs belnr&apos; R_BSEG NULL
*                _select &apos;bseg : bukrs + bukrs = &apos;&apos;PEI&apos;&apos; + belnr = &lt;t&gt;-belnr&apos; R_BSEG2 R_BSEG.
* NOTE         : all tokens must be seperated by space and are case insensitive
*              : Operators + (WHERE clause) and : (field specification) can be specified in any order
*----------------------------------------------------------------------*
DEFINE _SELECT.
  PERFORM _zap_select USING &amp;1 &amp;2 &amp;3.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : defines the signature of internal fieldcatalog subroutine.
*               _addfcat will then work using this signature.
* SYNTAX       :  _deffcat &apos;&lt;field1&gt; &lt;field2&gt; ...&apos;.
*              :  &lt;field1&gt; &lt;field2&gt; ... are fields of SLIS_FIELDCAT_ALV
* USAGE        : _deffcat &apos;fieldname tabname seltext_s&apos;.
* NOTE         : all tokens must be seperated by space and are case insensitive
*----------------------------------------------------------------------*
DEFINE _DEFFCAT.
  PERFORM _zap_deffcat USING &amp;1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : creates internal fieldcatalog based on signature defined using _deffcat
* SYNTAX       :  _addfcat &apos;&lt;field1&gt; &lt;field2&gt; ...&apos;.
*              :  where &lt;field1&gt; &lt;field2&gt; ... are field values to internal fieldcatalog
* USAGE        : _addfcat &apos;&apos;&apos;BUKRS&apos;&apos;    &apos;&apos;BSEG&apos;&apos; &apos;&apos;Company&apos;&apos;.
* NOTE         : all tokens must be seperated by space and are case insensitive
*----------------------------------------------------------------------*
DEFINE _ADDFCAT.
  PERFORM _zap_addfcat USING &amp;1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : returns internal fieldcatalog created using _deffcat and _addfcat
* SYNTAX       :  _getfcat &lt;field&gt;
*              :  where &lt;field&gt; is typed to SLIS_T_FIELDCAT_ALV
* USAGE        : DATA:  lit_fcat TYPE slis_t_fieldcat_alv.
*              : _getfcat lit_fcat.
* NOTE         : all tokens must be seperated by space and are case insensitive
*----------------------------------------------------------------------*
DEFINE _GETFCAT.
  PERFORM _zap_getfcat CHANGING &amp;1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : defines signature for internal layout structure for use in ALV
* SYNTAX       :  _deflayout &apos;&lt;field1&gt; &lt;field2&gt; ...&apos;
*              :  where &lt;field1&gt; &lt;field2&gt; ... are fields of SLIS_LAYOUT_ALV
* USAGE        : _deflayout &apos;zebra&apos;.
* NOTE         : all tokens must be seperated by space and are case insensitive
*----------------------------------------------------------------------*
DEFINE _DEFLAYOUT.
  PERFORM _zap_deflayout USING &amp;1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : creates internal layout structure based on signature defined using _deflayout
* SYNTAX       :  _addlayout &apos;&lt;field1&gt; &lt;field2&gt; ...&apos;.
*              :  where &lt;field1&gt; &lt;field2&gt; ... are field values to internal layout structure
* USAGE        : _addlayout &apos;&apos;&apos;X&apos;&apos;&apos;.
* NOTE         : all tokens must be seperated by space and enclosed in single quotes
*----------------------------------------------------------------------*
DEFINE _ADDLAYOUT.
  PERFORM _zap_addlayout USING &amp;1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : returns internal layout structure created using _deflayout and _addlayout
* SYNTAX       :  _getlayout &lt;field&gt;
*              :  where &lt;field&gt; is typed to SLIS_FIELDCAT_LAYOUT_ALV
* USAGE        : DATA:  lwa_layout TYPE slis_layout_alv.
*              : _getlayout lwa_layout.
* NOTE         : all tokens must be seperated by space and are case insensitive
*----------------------------------------------------------------------*
DEFINE _GETLAYOUT.
  PERFORM _zap_getlayout CHANGING &amp;1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
* DESCRIPTION  : displays ALV Grid based on fieldcatalog (optional) and layout (optional)
*              : if fieldcatalog is not specified, one is built internally
*              : based on the structure of the data table
* SYNTAX       :  _display &lt;variable&gt;
*              :  where &lt;variable&gt; is a data reference variable of the form returned by _select
* NOTE         : all tokens must be seperated by space and are case insensitive
*----------------------------------------------------------------------*
DEFINE _DISPLAY.
  PERFORM _zap_display USING &amp;1.
END-OF-DEFINITION.</source>
 </PROG>
 <PROG NAME="ZAP_CLASSES" VARCL="X" SUBC="I" RSTAT="K" RMAND="999" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="ZAP Classes" LENGTH="11 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZAP_CLASSES
*&amp;---------------------------------------------------------------------*

*----------------------------------------------------------------------*
*       CLASS _zap_lcl_error
*----------------------------------------------------------------------*
CLASS _ZAP_LCL_ERROR DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS: DISPLAY_ERROR IMPORTING IM_ERR_STR TYPE STRING.

ENDCLASS.                    &quot;_zap_lcl_error
*----------------------------------------------------------------------*
*       CLASS _zap_fieldcatalog
*----------------------------------------------------------------------*
CLASS _ZAP_FIELDCATALOG DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:  SET_FCAT_STRUCTURE  IMPORTING IM_FCATSTR TYPE FIELDNAME.
    CLASS-METHODS:  GET_FCAT_STRUCTURE  EXPORTING EX_FCATSTR TYPE FIELDNAME.
    CLASS-METHODS:  SET_FCAT_STRTAB     IMPORTING IM_STR     TYPE CHAR255.
    CLASS-METHODS:  GET_FCAT_STRTAB     EXPORTING FCAT_STR   TYPE ZAP_TT_CHAR255.
    CLASS-METHODS:  GET_FCAT            EXPORTING FCAT       TYPE SLIS_T_FIELDCAT_ALV.
    CLASS-METHODS:  APPEND_FCAT         IMPORTING IM_FCAT    TYPE SLIS_FIELDCAT_ALV.
  PRIVATE SECTION.
    CLASS-DATA: IT_FCAT TYPE SLIS_T_FIELDCAT_ALV.
    CLASS-DATA: IT_DD03L TYPE ZAP_TT_DD03L.
    CLASS-DATA: FCAT_STR_TAB TYPE ZAP_TT_CHAR255.
    CLASS-DATA: FCAT_ITM_TAB TYPE ZAP_TT_CHAR255.
    CLASS-DATA: FCAT_STRUCTURE TYPE TABLENAME.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS _zap_layout
*----------------------------------------------------------------------*
CLASS _ZAP_LAYOUT DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:  SET_LAYOUT_STRTAB   IMPORTING IM_STR     TYPE CHAR255.
    CLASS-METHODS:  GET_LAYOUT_STRTAB   EXPORTING LAYOUT_STR TYPE ZAP_TT_CHAR255.
    CLASS-METHODS:  GET_LAYOUT          EXPORTING EX_LAYOUT  TYPE SLIS_LAYOUT_ALV.
    CLASS-METHODS:  SET_LAYOUT          IMPORTING IM_LAYOUT  TYPE SLIS_LAYOUT_ALV.
  PRIVATE SECTION.
    CLASS-DATA: LAYOUT_STR_TAB TYPE ZAP_TT_CHAR255.
    CLASS-DATA: WA_LAYOUT TYPE SLIS_LAYOUT_ALV.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS _zap_lcl_error IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS _ZAP_LCL_ERROR IMPLEMENTATION.
  METHOD DISPLAY_ERROR.
    MESSAGE IM_ERR_STR TYPE &apos;E&apos; DISPLAY LIKE &apos;I&apos;.
    EXIT.
  ENDMETHOD.                    &quot;display_error

ENDCLASS.                    &quot;_zap_lcl_error
*----------------------------------------------------------------------*
*       CLASS _zap_fieldcatalog IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS _ZAP_FIELDCATALOG IMPLEMENTATION.
  METHOD SET_FCAT_STRUCTURE.
    FCAT_STRUCTURE = IM_FCATSTR.
  ENDMETHOD.
  METHOD GET_FCAT_STRUCTURE.
    EX_FCATSTR = FCAT_STRUCTURE.
  ENDMETHOD.
  METHOD SET_FCAT_STRTAB.
    SPLIT IM_STR AT SPACE INTO TABLE FCAT_STR_TAB.
  ENDMETHOD.

  METHOD GET_FCAT_STRTAB.
    FCAT_STR[] = FCAT_STR_TAB[].
  ENDMETHOD.

  METHOD GET_FCAT.
    FCAT[] = IT_FCAT[].
  ENDMETHOD.

  METHOD APPEND_FCAT.
    APPEND IM_FCAT TO IT_FCAT.
  ENDMETHOD.

ENDCLASS.
*----------------------------------------------------------------------*
*       CLASS _zap_layout IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS _ZAP_LAYOUT IMPLEMENTATION.
  METHOD SET_LAYOUT_STRTAB.
    SPLIT IM_STR AT SPACE INTO TABLE LAYOUT_STR_TAB.
  ENDMETHOD.

  METHOD GET_LAYOUT_STRTAB.
    LAYOUT_STR[] = LAYOUT_STR_TAB[].
  ENDMETHOD.

  METHOD GET_LAYOUT.
    MOVE-CORRESPONDING WA_LAYOUT TO EX_LAYOUT.
  ENDMETHOD.

  METHOD SET_LAYOUT.
    WA_LAYOUT = IM_LAYOUT.
  ENDMETHOD.

ENDCLASS.</source>
 </PROG>
 <PROG NAME="ZAP_FORMS" VARCL="X" SUBC="I" RSTAT="K" RMAND="999" RLOAD="E" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="ZAP Forms" LENGTH="9 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include           ZAP_FORMS
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_CHECK_FIELDS
*&amp;---------------------------------------------------------------------*
*      --&gt;P_TABNAME  text
*      --&gt;P_FIELDS_TAB  text
*      --&gt;P_IT_DD03L  text
*----------------------------------------------------------------------*
FORM _ZAP_CHECK_FIELDS  USING    P_TABNAME  TYPE DD03L-TABNAME
                                 P_FIELDS_TAB TYPE ZAP_TT_FIELDS
                                 P_IT_DD03L TYPE ZAP_TT_DD03L.
  FIELD-SYMBOLS: &lt;FS_FLD&gt; TYPE ZAP_TY_FIELDS.
  DATA: ERR_STR TYPE STRING.

  LOOP AT P_FIELDS_TAB ASSIGNING &lt;FS_FLD&gt;.
    READ TABLE P_IT_DD03L WITH KEY TABNAME = P_TABNAME
                                   FIELDNAME = &lt;FS_FLD&gt;-FIELDNAME
                                   TRANSPORTING NO FIELDS.
    IF SY-SUBRC &lt;&gt; 0.
      CLEAR ERR_STR.
      CONCATENATE &apos;ZAPError : column&apos; &lt;FS_FLD&gt; &apos;is unknown in table&apos; P_TABNAME INTO ERR_STR SEPARATED BY SPACE.
      _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
    ENDIF.
  ENDLOOP.

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_WHERETAB
*&amp;---------------------------------------------------------------------*
*      &lt;--P__ZAP_WHERE_STR  text
*      &lt;--P__ZAP_WHERE_TAB  text
*----------------------------------------------------------------------*
FORM _ZAP_BUILD_WHERETAB  CHANGING P__ZAP_WHERE_STR TYPE CHAR255
                              P__ZAP_WHERE_TAB TYPE ZAP_TT_CHAR255.
  IF P__ZAP_WHERE_STR IS NOT INITIAL.
    SHIFT P__ZAP_WHERE_STR LEFT DELETING LEADING SPACE.
    REPLACE FIRST OCCURRENCE OF REGEX &apos;&lt;[Tt]&gt;&apos; IN P__ZAP_WHERE_STR WITH &apos;&lt;FS_FAETAB&gt;&apos;.
    IF LINES( P__ZAP_WHERE_TAB ) &gt; 0.
      CONCATENATE &apos;AND&apos; P__ZAP_WHERE_STR INTO P__ZAP_WHERE_STR SEPARATED BY SPACE.
    ENDIF.
    APPEND P__ZAP_WHERE_STR TO P__ZAP_WHERE_TAB.
    CLEAR P__ZAP_WHERE_STR.
  ENDIF.

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _zap_select
*&amp;---------------------------------------------------------------------*
FORM _ZAP_SELECT USING P_STR  TYPE CHAR255
                       P_RBSEG TYPE REF TO DATA
                       P_RFAESTR TYPE REF TO DATA.
  DATA: SEL_TAB TYPE TABLE OF STRING.
  DATA: TABNAME TYPE TABNAME.
  DATA: BEGIN OF MODE,
          MODE TYPE I,
          CTR  TYPE I,
        END OF MODE,
        CURR_MODE LIKE MODE-MODE.
  DATA: FIELDS_TAB TYPE STANDARD TABLE OF ZAP_TY_FIELDS.
  DATA: WHERE_TAB TYPE ZAP_TT_CHAR255,
        WHERE_STR TYPE CHAR255.
  DATA: FAE_TAB TYPE ZAP_TT_CHAR255.
  DATA: IT_DD03L TYPE ZAP_TT_DD03L.
  DATA: ERR_STR TYPE STRING.
  FIELD-SYMBOLS:  &lt;FS_STR&gt;    TYPE STRING,
                  &lt;FS_FLD&gt;    TYPE ZAP_TY_FIELDS,
                  &lt;FS_FAETAB&gt; TYPE STANDARD TABLE.
  CONSTANTS:  FIELD_MODE TYPE I VALUE 1,
              WHERE_MODE TYPE I VALUE 2.

  CONDENSE P_STR.

  SPLIT P_STR AT SPACE INTO TABLE SEL_TAB.

  LOOP AT SEL_TAB ASSIGNING &lt;FS_STR&gt;.
    IF SY-TABIX = 1.
      TRANSLATE &lt;FS_STR&gt; TO UPPER CASE.
      TABNAME = &lt;FS_STR&gt;.
      SELECT COUNT(*) FROM DD02L WHERE TABNAME = &lt;FS_STR&gt;.
      IF SY-SUBRC &lt;&gt; 0.
        CLEAR ERR_STR.
        ERR_STR = &apos;ZAPError : Parsing failed. Try separating tokens with space.&apos;.
        _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
      ENDIF.
      _ZAP_FIELDCATALOG=&gt;SET_FCAT_STRUCTURE( EXPORTING IM_FCATSTR = TABNAME ).
    ELSE.
      CASE &lt;FS_STR&gt;.
        WHEN &apos;:&apos;.
          CURR_MODE = FIELD_MODE.
          PERFORM _ZAP_BUILD_WHERETAB CHANGING WHERE_STR WHERE_TAB.
        WHEN &apos;+&apos;.
          CURR_MODE = WHERE_MODE.
          PERFORM _ZAP_BUILD_WHERETAB CHANGING WHERE_STR WHERE_TAB.
        WHEN OTHERS.
          CASE CURR_MODE.
            WHEN FIELD_MODE.
              TRANSLATE &lt;FS_STR&gt; TO UPPER CASE.
              APPEND &lt;FS_STR&gt; TO FIELDS_TAB.
            WHEN WHERE_MODE.
              FIND FIRST OCCURRENCE OF REGEX &apos;&lt;[Tt]&gt;-.*&apos; IN WHERE_STR.
              IF SY-SUBRC = 0.
                TRANSLATE &lt;FS_STR&gt; TO UPPER CASE.
                CONCATENATE &apos;&lt;FS_FAETAB&gt;-&apos; WHERE_STR+4 &lt;FS_STR&gt; INTO WHERE_STR SEPARATED BY SPACE.
              ELSE.
                CONCATENATE WHERE_STR &lt;FS_STR&gt; INTO WHERE_STR SEPARATED BY SPACE.
              ENDIF.
            WHEN OTHERS.
              CLEAR ERR_STR.
              ERR_STR = &apos;ZAPError : Parsing failed. Try separating tokens with space.&apos;.
              _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
          ENDCASE.
      ENDCASE.
    ENDIF.
  ENDLOOP.

  PERFORM _ZAP_BUILD_WHERETAB CHANGING WHERE_STR WHERE_TAB.

  IF P_RFAESTR &lt;&gt; ZAP_NULL AND LINES( WHERE_TAB ) = 0.
    CLEAR ERR_STR.
    ERR_STR = &apos;ZAPError : WHERE condition does not refer to the FOR ALL ENTRIES table&apos;.
    _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
  ENDIF.

  DATA: RTABLINE TYPE REF TO CL_ABAP_STRUCTDESCR,
        TCOMP    TYPE ABAP_COMPDESCR_TAB.
  DATA: TFCAT    TYPE LVC_T_FCAT.
  DATA: TDYNTAB  TYPE REF TO DATA.
  DATA: WA_ITAB  TYPE CHAR30.
  FIELD-SYMBOLS:  &lt;FS_DD03L&gt;  TYPE DD03L,
                  &lt;FS_FCAT&gt;   TYPE LVC_S_FCAT,
                  &lt;FS_DYNTAB&gt; TYPE STANDARD TABLE.

  RTABLINE ?= CL_ABAP_TYPEDESCR=&gt;DESCRIBE_BY_NAME( TABNAME ).
  TCOMP = RTABLINE-&gt;COMPONENTS.

  READ TABLE FIELDS_TAB INDEX 1 ASSIGNING &lt;FS_FLD&gt;.

  IF SY-SUBRC = 0.
    IF &lt;FS_FLD&gt; = &apos;*&apos;.
      IF LINES( FIELDS_TAB ) &lt;&gt; 1.
        CLEAR ERR_STR.
        CONCATENATE &apos;ZAPError : field specification not allowed with * in&apos; TABNAME &apos;SELECT query&apos;
          INTO ERR_STR SEPARATED BY SPACE.
        _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
        EXIT.
      ENDIF.
      SELECT FIELDNAME
        FROM DD03L
        INTO TABLE FIELDS_TAB
        WHERE TABNAME = TABNAME
        .
    ENDIF.

    DELETE FIELDS_TAB WHERE FIELDNAME = &apos;&apos; OR FIELDNAME = &apos;MANDT&apos;
      OR FIELDNAME CP &apos;*.*&apos; OR FIELDNAME CP &apos;*/*&apos;.

    SELECT *
      FROM DD03L
      INTO TABLE IT_DD03L
      FOR ALL ENTRIES IN FIELDS_TAB
      WHERE TABNAME = TABNAME
        AND FIELDNAME = FIELDS_TAB-FIELDNAME
      .
    PERFORM _ZAP_CHECK_FIELDS USING TABNAME FIELDS_TAB IT_DD03L.

    IF LINES( IT_DD03L ) &lt;&gt; LINES( FIELDS_TAB ).
      LOOP AT IT_DD03L ASSIGNING &lt;FS_DD03L&gt;.
        READ TABLE FIELDS_TAB WITH KEY FIELDNAME = &lt;FS_DD03L&gt;-FIELDNAME TRANSPORTING NO FIELDS.
        IF SY-SUBRC &lt;&gt; 0.
          CLEAR ERR_STR.
          CONCATENATE &apos;ZAPError :&apos; &lt;FS_DD03L&gt;-FIELDNAME &apos;does not exist in&apos; TABNAME
           INTO ERR_STR SEPARATED BY SPACE.
          _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.

    SORT IT_DD03L BY POSITION.

    LOOP AT IT_DD03L ASSIGNING &lt;FS_DD03L&gt;.
      APPEND INITIAL LINE TO TFCAT ASSIGNING &lt;FS_FCAT&gt;.
      &lt;FS_FCAT&gt;-TABNAME   = &lt;FS_DD03L&gt;-TABNAME.
      &lt;FS_FCAT&gt;-FIELDNAME = &lt;FS_DD03L&gt;-FIELDNAME.
      &lt;FS_FCAT&gt;-DATATYPE  = &lt;FS_DD03L&gt;-DATATYPE.
      &lt;FS_FCAT&gt;-OUTPUTLEN = &lt;FS_FCAT&gt;-INTLEN = &lt;FS_DD03L&gt;-LENG.
      &lt;FS_FCAT&gt;-ROLLNAME  = &lt;FS_DD03L&gt;-ROLLNAME.
      &lt;FS_FCAT&gt;-DECIMALS  = &lt;FS_DD03L&gt;-DECIMALS.
      IF &lt;FS_DD03L&gt;-DATATYPE = &apos;CURR&apos;.
        &lt;FS_FCAT&gt;-CFIELDNAME = &lt;FS_DD03L&gt;-FIELDNAME.
      ELSEIF &lt;FS_DD03L&gt;-DATATYPE = &apos;QUAN&apos;.
        &lt;FS_FCAT&gt;-QFIELDNAME = &lt;FS_DD03L&gt;-FIELDNAME.
      ENDIF.
    ENDLOOP.

  ELSE.
    CLEAR ERR_STR.
    CONCATENATE &apos;ZAPError : no fields specified in&apos; TABNAME &apos;SELECT query&apos;
      INTO ERR_STR SEPARATED BY SPACE.
    _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
    EXIT.
  ENDIF.

  CALL METHOD CL_ALV_TABLE_CREATE=&gt;CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG           = TFCAT
    IMPORTING
      EP_TABLE                  = P_RBSEG
    EXCEPTIONS
      GENERATE_SUBPOOL_DIR_FULL = 1
      OTHERS                    = 2.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  ASSIGN P_RBSEG-&gt;* TO &lt;FS_DYNTAB&gt;.

  IF P_RFAESTR IS NOT INITIAL.
    ASSIGN P_RFAESTR-&gt;* TO &lt;FS_FAETAB&gt;.
    SELECT (FIELDS_TAB)
      FROM (TABNAME)
      INTO TABLE &lt;FS_DYNTAB&gt;
      FOR ALL ENTRIES IN &lt;FS_FAETAB&gt;
      WHERE (WHERE_TAB)
      .
  ELSE.
    SELECT (FIELDS_TAB)
      FROM (TABNAME)
      INTO TABLE &lt;FS_DYNTAB&gt;
      WHERE (WHERE_TAB)
      .
  ENDIF.

ENDFORM.                    &quot;_select
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_DEFFCAT
*&amp;---------------------------------------------------------------------*
*      --&gt;P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_DEFFCAT USING P_STR TYPE CHAR255.
  CONDENSE P_STR.
  _ZAP_FIELDCATALOG=&gt;SET_FCAT_STRTAB( P_STR ).

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_DEFLAYOUT
*&amp;---------------------------------------------------------------------*
*      --&gt;P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_DEFLAYOUT  USING P_STR TYPE CHAR255.
  CONDENSE P_STR.
  _ZAP_LAYOUT=&gt;SET_LAYOUT_STRTAB( P_STR ).

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  BUILD_RESULTS_TAB
*&amp;---------------------------------------------------------------------*
*      --&gt;P_P_STR  text
*      &lt;--P_RESULTS_TAB  text
*----------------------------------------------------------------------*
FORM BUILD_RESULTS_TAB  USING    P_STR TYPE CHAR255
                        CHANGING P_RESULTS_TAB TYPE MATCH_RESULT_TAB.

  FIELD-SYMBOLS: &lt;FS_RESULT&gt; TYPE MATCH_RESULT.

  FIND ALL OCCURRENCES OF REGEX &apos;[^&apos;&apos;]+&apos; IN P_STR RESULTS P_RESULTS_TAB.

  DATA: RESULTS_LEN TYPE I.

  RESULTS_LEN = LINES( P_RESULTS_TAB ).

  LOOP AT P_RESULTS_TAB ASSIGNING &lt;FS_RESULT&gt;.
    IF SY-TABIX = RESULTS_LEN. EXIT. ENDIF.
    IF SY-TABIX MOD 2 = 1.
      APPEND &lt;FS_RESULT&gt; TO P_RESULTS_TAB.
    ENDIF.
  ENDLOOP.
  DELETE P_RESULTS_TAB FROM 1 TO RESULTS_LEN.

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_ADDFCAT
*&amp;---------------------------------------------------------------------*
*      --&gt;P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_ADDFCAT USING P_STR TYPE CHAR255.
  DATA: WA_FCAT TYPE SLIS_FIELDCAT_ALV.
  DATA: RESULTS_TAB TYPE MATCH_RESULT_TAB.
  DATA: _ZAP_ERR_STR TYPE STRING.
  FIELD-SYMBOLS:  &lt;FS_WA&gt;     TYPE CHAR255,
                  &lt;FS_WA2&gt;    TYPE CHAR255,
                  &lt;FS_RESULT&gt; TYPE MATCH_RESULT,
                  &lt;FS_COMP&gt;.

  CONDENSE P_STR.

  PERFORM BUILD_RESULTS_TAB USING P_STR
                            CHANGING RESULTS_TAB.

  DATA: FCAT_ITM_TAB TYPE ZAP_TT_CHAR255.

  LOOP AT RESULTS_TAB ASSIGNING &lt;FS_RESULT&gt;.
    APPEND P_STR+&lt;FS_RESULT&gt;-OFFSET(&lt;FS_RESULT&gt;-LENGTH) TO FCAT_ITM_TAB.
  ENDLOOP.

  DATA: FCAT_STR_TAB TYPE ZAP_TT_CHAR255.

  _ZAP_FIELDCATALOG=&gt;GET_FCAT_STRTAB( IMPORTING FCAT_STR = FCAT_STR_TAB ).

  DATA: ITM_LINES TYPE I,
        STR_LINES TYPE I.

  ITM_LINES = LINES( FCAT_ITM_TAB ).
  STR_LINES = LINES( FCAT_STR_TAB ).
  IF ITM_LINES &lt;&gt; STR_LINES.
    CLEAR _ZAP_ERR_STR.
    _ZAP_ERR_STR =  &apos;ZAPError : Different number of args in fieldcat definition and assignment. Check whether quotes have been placed around each argument and that number of arguments is same as that defined using _deffcat&apos;.
    _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = _ZAP_ERR_STR ).
  ENDIF.

  LOOP AT FCAT_ITM_TAB ASSIGNING &lt;FS_WA&gt;.
    READ TABLE FCAT_STR_TAB ASSIGNING &lt;FS_WA2&gt; INDEX SY-TABIX.
    ASSIGN COMPONENT &lt;FS_WA2&gt; OF STRUCTURE WA_FCAT TO &lt;FS_COMP&gt;.
    IF SY-SUBRC &lt;&gt; 0.
      CLEAR _ZAP_ERR_STR.
      CONCATENATE &apos;ZAPError : Component&apos; &lt;FS_WA&gt; &apos;does not exist in SLIS_FIELDCAT_ALV&apos;
        INTO _ZAP_ERR_STR SEPARATED BY SPACE.
      _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = _ZAP_ERR_STR ).
    ELSE.
      &lt;FS_COMP&gt; = &lt;FS_WA&gt;.
    ENDIF.
  ENDLOOP.

  _ZAP_FIELDCATALOG=&gt;APPEND_FCAT( IM_FCAT = WA_FCAT ).

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_ADDLAYOUT
*&amp;---------------------------------------------------------------------*
*      --&gt;P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_ADDLAYOUT  USING P_STR TYPE CHAR255.
  DATA: WA_LAYOUT TYPE SLIS_LAYOUT_ALV.
  DATA: RESULTS_TAB TYPE MATCH_RESULT_TAB.
  DATA: _ZAP_ERR_STR TYPE STRING.
  FIELD-SYMBOLS:  &lt;FS_WA&gt;     TYPE CHAR255,
                  &lt;FS_WA2&gt;    TYPE CHAR255,
                  &lt;FS_RESULT&gt; TYPE MATCH_RESULT,
                  &lt;FS_COMP&gt;.

  CONDENSE P_STR.

  PERFORM BUILD_RESULTS_TAB USING P_STR
                            CHANGING RESULTS_TAB.

  DATA: LAYOUT_ITM_TAB TYPE ZAP_TT_CHAR255.

  LOOP AT RESULTS_TAB ASSIGNING &lt;FS_RESULT&gt;.
    APPEND P_STR+&lt;FS_RESULT&gt;-OFFSET(&lt;FS_RESULT&gt;-LENGTH) TO LAYOUT_ITM_TAB.
  ENDLOOP.

  DATA: LAYOUT_STR_TAB TYPE ZAP_TT_CHAR255.

  _ZAP_LAYOUT=&gt;GET_LAYOUT_STRTAB( IMPORTING LAYOUT_STR = LAYOUT_STR_TAB ).

  DATA: ITM_LINES TYPE I,
        STR_LINES TYPE I.

  ITM_LINES = LINES( LAYOUT_ITM_TAB ).
  STR_LINES = LINES( LAYOUT_STR_TAB ).
  IF ITM_LINES &lt;&gt; STR_LINES.
    CLEAR _ZAP_ERR_STR.
    _ZAP_ERR_STR =  &apos;ZAPError : Different number of args in fieldcat definition and assignment&apos;.
    _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = _ZAP_ERR_STR ).
  ENDIF.

  LOOP AT LAYOUT_ITM_TAB ASSIGNING &lt;FS_WA&gt;.
    READ TABLE LAYOUT_STR_TAB ASSIGNING &lt;FS_WA2&gt; INDEX SY-TABIX.
    ASSIGN COMPONENT &lt;FS_WA2&gt; OF STRUCTURE WA_LAYOUT TO &lt;FS_COMP&gt;.
    IF SY-SUBRC &lt;&gt; 0.
      CLEAR _ZAP_ERR_STR.
      CONCATENATE &apos;ZAPError : Component&apos; &lt;FS_WA&gt; &apos;does not exist in SLIS_LAYOUT_ALV&apos; INTO _ZAP_ERR_STR SEPARATED BY SPACE.
      _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = _ZAP_ERR_STR ).
    ELSE.
      &lt;FS_COMP&gt; = &lt;FS_WA&gt;.
    ENDIF.
  ENDLOOP.

  _ZAP_LAYOUT=&gt;SET_LAYOUT( IM_LAYOUT = WA_LAYOUT ).

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_GETFCAT
*&amp;---------------------------------------------------------------------*
*      --&gt;P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_GETFCAT  CHANGING    P_FCAT TYPE SLIS_T_FIELDCAT_ALV.
  _ZAP_FIELDCATALOG=&gt;GET_FCAT( IMPORTING FCAT = P_FCAT ).

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_GETLAYOUT
*&amp;---------------------------------------------------------------------*
*      &lt;--P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_GETLAYOUT  CHANGING P_LAYOUT TYPE SLIS_LAYOUT_ALV.
  _ZAP_LAYOUT=&gt;GET_LAYOUT( IMPORTING EX_LAYOUT = P_LAYOUT ).

ENDFORM.
*&amp;---------------------------------------------------------------------*
*&amp;      Form  _ZAP_DISPLAY
*&amp;---------------------------------------------------------------------*
*      --&gt;P_&amp;1  text
*----------------------------------------------------------------------*
FORM _ZAP_DISPLAY USING P_DATA TYPE REF TO DATA.
  DATA: IT_FCAT TYPE SLIS_T_FIELDCAT_ALV.
  DATA: FCAT_STR TYPE TABNAME.
  DATA: WA_LAYOUT TYPE SLIS_LAYOUT_ALV.
  DATA: LV_TABLEDESCR TYPE REF TO CL_ABAP_TABLEDESCR,
        LV_TABLELINE  TYPE REF TO CL_ABAP_STRUCTDESCR.
  DATA: COMPONENTS_TAB TYPE ABAP_COMPDESCR_TAB.
  DATA: LIT_DD03L TYPE ZAP_TT_DD03L.
  DATA: ERR_STR TYPE STRING.
  FIELD-SYMBOLS:  &lt;FS_DATA&gt; TYPE STANDARD TABLE,
                  &lt;FS_FCAT&gt; TYPE SLIS_FIELDCAT_ALV.

  _ZAP_FIELDCATALOG=&gt;GET_FCAT( IMPORTING FCAT = IT_FCAT ).
  _ZAP_FIELDCATALOG=&gt;GET_FCAT_STRUCTURE( IMPORTING EX_FCATSTR = FCAT_STR ).

  IF P_DATA IS INITIAL.
    CLEAR ERR_STR.
    ERR_STR = &apos;ZAPError : Reference variable passed to _display is null&apos;.
    _ZAP_LCL_ERROR=&gt;DISPLAY_ERROR( IM_ERR_STR = ERR_STR ).
  ENDIF.

  ASSIGN P_DATA-&gt;* TO &lt;FS_DATA&gt;.

  _ZAP_LAYOUT=&gt;GET_LAYOUT( IMPORTING EX_LAYOUT = WA_LAYOUT ).

  IF IT_FCAT IS INITIAL.
    DATA: R_STRUCT TYPE REF TO CL_ABAP_STRUCTDESCR.
    DATA: R_LINE   TYPE REF TO DATA.
    FIELD-SYMBOLS: &lt;FS_COMP&gt; TYPE ABAP_COMPDESCR.

    CREATE DATA R_LINE LIKE LINE OF &lt;FS_DATA&gt;.
    R_STRUCT ?= CL_ABAP_TYPEDESCR=&gt;DESCRIBE_BY_DATA_REF( R_LINE ).

    SELECT * FROM DD03L
      INTO TABLE LIT_DD03L
      FOR ALL ENTRIES IN R_STRUCT-&gt;COMPONENTS
      WHERE TABNAME = FCAT_STR
        AND FIELDNAME = R_STRUCT-&gt;COMPONENTS-NAME
        AND KEYFLAG = &apos;X&apos;
      .

    LOOP AT R_STRUCT-&gt;COMPONENTS ASSIGNING &lt;FS_COMP&gt;.
      APPEND INITIAL LINE TO IT_FCAT ASSIGNING &lt;FS_FCAT&gt;.
      &lt;FS_FCAT&gt;-FIELDNAME = &lt;FS_FCAT&gt;-REF_FIELDNAME = &lt;FS_COMP&gt;-NAME.
      &lt;FS_FCAT&gt;-TABNAME = &lt;FS_FCAT&gt;-REF_TABNAME = FCAT_STR.
      READ TABLE LIT_DD03L WITH KEY FIELDNAME = &lt;FS_COMP&gt;-NAME TRANSPORTING NO FIELDS.
      IF SY-SUBRC = 0.
        &lt;FS_FCAT&gt;-KEY = &apos;X&apos;.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF WA_LAYOUT IS INITIAL.
    WA_LAYOUT-ZEBRA = &apos;X&apos;.
    WA_LAYOUT-COLWIDTH_OPTIMIZE = &apos;X&apos;.
  ENDIF.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      IS_LAYOUT     = WA_LAYOUT
      IT_FIELDCAT   = IT_FCAT
    TABLES
      T_OUTTAB      = &lt;FS_DATA&gt;
    EXCEPTIONS
      PROGRAM_ERROR = 1
      OTHERS        = 2.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.</source>
 </PROG>
</nugget>
